const mongoose = require("mongoose");
mongoose.Promise = global.Promise;
const slug = require("slugs"); //make url friendy names

const storeSchema = new mongoose.Schema({
  name: {
    type: String,
    trim: true,
    required: "Please enter a store name"
  },
  slug: String, //will be autogenerated
  description: {
    type: String,
    trim: true
  },
  tags: [String],
  created: {
    type: Date,
    default: Date.now
  },
  location: {
    type: {
      type: String,
      default: "Point"
    },
    coordinates: [{ type: Number, require: "you must supply coordinates" }],
    address: {
      type: String,
      required: "You must supply address"
    }
  },

  photo: String,
  author: {
    type: mongoose.Schema.ObjectId,
    ref: "User",
    required: "You mus supply an author"
  }
});

// DEFINE INDEXES
storeSchema.index({
  name: "text",
  description: "text"
});

storeSchema.index({ location: "2dsphere" });

storeSchema.pre("save", async function(next) {
  if (!this.isModified("name")) {
    next(); //skip it
    return; // stop this function from running
  }
  this.slug = slug(this.name);

  // find same named stores and name them like this gab, gab-1, gab-2

  const slugRegEx = new RegExp(`^(${this.slug})((-[0-9]*$)?)$`, "i");
  const storeWithSlug = await this.constructor.find({ slug: slugRegEx });
  if (storeWithSlug.length) {
    this.slug = `${this.slug}-${storeWithSlug.length + 1}`;
  }

  next();
});

storeSchema.statics.getTagsList = function() {
  return this.aggregate([
    { $unwind: "$tags" },
    { $group: { _id: "$tags", count: { $sum: 1 } } },
    { $sort: { count: -1 } }
  ]);
};

module.exports = mongoose.model("Store", storeSchema);
